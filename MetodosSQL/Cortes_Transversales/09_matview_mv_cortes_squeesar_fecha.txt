-- Eliminar vista materializada 'mv_cortes_squeesar_fecha'
DROP MATERIALIZED VIEW
IF EXISTS cortes_transversales.mv_cortes_squeesar_fecha;

-- Crear vista materializada 'mv_cortes_squeesar_fecha'
CREATE MATERIALIZED VIEW cortes_transversales.mv_cortes_squeesar_fecha AS (
SELECT
	t1.id_cortes_segmentos,
	t1.id_corte,
	t2.geom_segmento,
	t2.distancia,
	(fn_intersecta_squeesar_fecha (t1.x_0, t1.y_0, t1.x_1, t1.y_1, t1.x_2, t1.y_2, t1.x_3, t1.y_3, t1.x_0, t1.y_0 )).*
	FROM
		cortes_transversales.cortes_segmentos t1
	INNER JOIN (
		SELECT
			a1.id_cortes_segmentos,
			a1.id_corte,
			a1.geom_segmento,
			st_distance ((a1.geom_centroide :: geography), (a2.geom_inicio :: geography)) AS distancia
		FROM
			cortes_transversales.v_cortes_segmentos a1
		INNER JOIN
			(
-- Tabla con el geom de inicio de cada corte
			SELECT DISTINCT
			 ON (t4.id_corte) t4.id_corte,
				st_setsrid (
					st_centroid (
						st_geomfromtext (
							(((((((('LINESTRING(' :: TEXT || t4.x_0) || ' ' :: TEXT) || t4.y_0) || ',' :: TEXT) || t4.x_1) || ' ' :: TEXT) || t4.y_1) || ')' :: TEXT
							),4326
						)
					),4326
				) AS geom_inicio
			FROM
				cortes_transversales.cortes_segmentos t4
			ORDER BY
				t4.id_corte,
				t4.id_cortes_segmentos
		) a2
		ON 
			(a1.id_corte = a2.id_corte)
		ORDER BY
			a1.id_cortes_segmentos
	) t2
	ON 
		(t1.id_cortes_segmentos = t2.id_cortes_segmentos)
	WHERE
		t1.id_corte IS NOT NULL
	ORDER BY
		t1.id_corte,
		fecha,
		t2.distancia
) WITH DATA;

-- Actualizar vista materializada 'mv_cortes_squeesar_fecha'
select fn_refresh_mv_cortes_squeesar_fecha();
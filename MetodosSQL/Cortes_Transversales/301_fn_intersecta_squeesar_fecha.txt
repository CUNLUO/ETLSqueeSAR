-- Elimina funcion 'fn_intersecta_squeesar_fecha'
DROP FUNCTION
IF EXISTS cortes_transversales.fn_intersecta_squeesar_fecha (
	x_0 FLOAT,
	y_0 FLOAT,
	x_1 FLOAT,
	y_1 FLOAT,
	x_2 FLOAT,
	y_2 FLOAT,
	x_3 FLOAT,
	y_3 FLOAT,
	x_4 FLOAT,
	y_4 FLOAT
) CASCADE;

-- Crea funcion 'fn_intersecta_squeesar_fecha'
CREATE FUNCTION cortes_transversales.fn_intersecta_squeesar_fecha (
	x_0 FLOAT,
	y_0 FLOAT,
	x_1 FLOAT,
	y_1 FLOAT,
	x_2 FLOAT,
	y_2 FLOAT,
	x_3 FLOAT,
	y_3 FLOAT,
	x_4 FLOAT,
	y_4 FLOAT
) RETURNS TABLE (
	new_geom geometry,
	def_mean FLOAT,
	n BIGINT,
	fecha DATE
) AS $$

-- Declarar variables
DECLARE
	sQuery_GeomSegmento$	 varchar(10000);
	sQuery_Total$ varchar(10000);
	sQuery_NroPuntos$ varchar(10000);
	sNombre_Tabla$	varchar(255);
	iNro_Puntos$ INT;


BEGIN
-- Inicializar variables
	sQuery_GeomSegmento$ := '';
	sQuery_Total$ := '';
	sQuery_NroPuntos$ := '';
	sNombre_Tabla$ := '';
	iNro_Puntos$ := 0;

-- Determinar squeesar vigente
	SELECT DISTINCT
			nombre_tabla_consolidada
		INTO
			sNombre_Tabla$
		FROM
			squeesar.registro_squeesar
		WHERE
			vigencia  = 'S';


-- Parte de la query con la geometria a intersectar			
	sQuery_GeomSegmento$ := 'ST_Transform (
		ST_GeomFromText (
			''POLYGON((' || $1 || ' ' || $2 || ' ,' || $3 || ' ' || $4 || ',' || $5 || ' ' || $6 || ',' || $7 || ' ' || $8 || ',' || $9 || ' ' || $10 || '))'',	4326), 1000)';

-- Determinar si hay puntos en la interseccion
	sQuery_NroPuntos$ := 'SELECT COUNT(*)
												FROM
													"squeesar".' || sNombre_Tabla$ || ' AS t1
												INNER JOIN squeesar.' || sNombre_Tabla$ || '_fecha AS t2 
												ON (t1.id_squeesar_consolidado = t2.id_squeesar_consolidado)
												WHERE
													ST_Intersects (	t1.geom, ' || sQuery_GeomSegmento$ || ')
													AND ST_isvalid (t1.geom) = ''t''
													AND ST_isvalid ( ' || sQuery_GeomSegmento$ || '	) = ''t''
													AND t1.x >= st_xmin ( ' || sQuery_GeomSegmento$ || ')
													AND t1.x <= st_xmax ( ' || sQuery_GeomSegmento$ || ')
													AND t1.y >= st_ymin ( ' || sQuery_GeomSegmento$ || ')
													AND t1.y <= st_ymax ( ' || sQuery_GeomSegmento$ || ')
												GROUP BY
													t2.fecha;';
	EXECUTE sQuery_NroPuntos$ INTO iNro_Puntos$;

-- Construir query dependiedo si la intersecciÃ³n es vacia o no
	IF iNro_Puntos$ > 0 THEN
	-- Query completa
	sQuery_Total$ := 'SELECT ' 
											|| sQuery_GeomSegmento$ || ' AS geom_segmento,
											AVG (t2.deformacion) AS def_mean,
											COUNT (t1.geom) AS n,
											t2.fecha
										FROM
											"squeesar".' || sNombre_Tabla$ || ' AS t1
										INNER JOIN squeesar.' || sNombre_Tabla$ || '_fecha AS t2 ON (
											t1.id_squeesar_consolidado = t2.id_squeesar_consolidado
										)
										WHERE
											ST_Intersects (	t1.geom, ' || sQuery_GeomSegmento$ || ')
										AND ST_isvalid (t1.geom) = ''t''
										AND ST_isvalid ( ' || sQuery_GeomSegmento$ || '	) = ''t''
										AND t1.x >= st_xmin ( ' || sQuery_GeomSegmento$ || ')
										AND t1.x <= st_xmax ( ' || sQuery_GeomSegmento$ || ')
										AND t1.y >= st_ymin ( ' || sQuery_GeomSegmento$ || ')
										AND t1.y <= st_ymax ( ' || sQuery_GeomSegmento$ || ')
										GROUP BY
											' || sQuery_GeomSegmento$ || ',
											t2.fecha;';
	ELSE
	-- Reemplazar la queery en caso que no hayan datos
		sQuery_Total$ := 'SELECT ' 
												|| sQuery_GeomSegmento$ || ' AS geom_segmento,
												-9999::float AS def_mean,
												0::bigint AS n,
												t1.fecha
											FROM
												squeesar.fechas_squeesar_vigente AS t1;';

	END IF;

-- Ejecutar query											
	RETURN QUERY EXECUTE sQuery_Total$;
END;

 $$ LANGUAGE plpgsql;
-- Eliminar funcion 'fn_intersecta_squeesar_resumen'
DROP FUNCTION
IF EXISTS cortes_transversales.fn_intersecta_squeesar_resumen (geom VARCHAR(4000));


-- Crea funcion 'fn_intersecta_squeesar_resumen'
CREATE FUNCTION cortes_transversales.fn_intersecta_squeesar_resumen (geom VARCHAR(4000)) RETURNS TABLE (
	geom_corte geometry,
	geom_interseccion geometry,
	vel_mean FLOAT,
	height_mean FLOAT,
	acc_mean FLOAT,
	coherence_mean FLOAT,
	cantidad_puntos BIGINT
) AS $$ 

-- Declara variables locales
DECLARE
	sQuery_Total$ VARCHAR (10000) ;
	sNombre_Tabla$ VARCHAR (255) ;


BEGIN
-- Inicializar variables
	sQuery_Total$ := '' ; 
	sNombre_Tabla$ := '' ;

-- Determinar la tabla del squeesar vigente
 SELECT DISTINCT
		nombre_tabla_consolidada INTO sNombre_Tabla$
	FROM
		squeesar.registro_squeesar
	WHERE
		vigencia = 'S' ;

 -- Contruir query para obtener datos de la intersecciÃ³n del squeesar con el geom input
 sQuery_Total$ := 'SELECT st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000) AS geom_corte,
											ST_union (t1.geom) AS geom_interseccion,
											AVG (t1.vel) AS vel_mean,
											AVG (t1.height) AS height_mean,
											AVG (t1.acc) AS acc_mean,
											AVG (t1.coherence) AS coherence_mean,
											COUNT (t1.geom) AS cantidad_puntos
										FROM
											"squeesar".' || sNombre_Tabla$ || ' AS t1
										WHERE
											ST_Intersects (	t1.geom, st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000))
										AND ST_isvalid (t1.geom) = ''t''
										AND ST_isvalid ( st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000)) = ''t''
										AND t1.x >= st_xmin ( st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000))
										AND t1.x <= st_xmax ( st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000))
										AND t1.y >= st_ymin ( st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000))
										AND t1.y <= st_ymax ( st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000))
										GROUP BY
											st_transform(ST_GeomFromText(''' || $1 || ''',1000),1000)'  ;

-- Ejecutar query
 RETURN QUERY EXECUTE sQuery_Total$ ;
	END ;
 $$ LANGUAGE plpgsql;